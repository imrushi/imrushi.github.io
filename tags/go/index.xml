<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Rushi Panchariya</title><link>/tags/go/</link><description>Recent content in Go on Rushi Panchariya</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 11 Oct 2023 11:10:47 +0530</lastBuildDate><atom:link href="/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Automate with Precision: Building Custom GitHub Actions</title><link>/posts/create-github-action/</link><pubDate>Wed, 11 Oct 2023 11:10:47 +0530</pubDate><guid>/posts/create-github-action/</guid><description>&lt;p>After writing my Go Dash blog, I got an idea of whether I could push the same blog to Medium. I started looking for ways to automate this thing. I checked on the GitHub Marketplace for actions that can push content to Medium directly. I found the GitHub action &lt;a href="https://github.com/pr4k/hugo-to-medium">hugo-to-medium&lt;/a> by &lt;a href="https://github.com/pr4k">Prakhar Kaushik&lt;/a>.&lt;/p>
&lt;p>This GitHub action was good, but there were some issues. In Hugo, I mostly use &lt;a href="https://gohugo.io/content-management/shortcodes/">shortcodes&lt;/a> to showcase the sample codes, figures, and images. Another one is that it doesn’t remove any shortcodes. There was no way for me to remove this from the publishing process. So this issue inspired me to create my own GitHub action, which allows to:&lt;/p></description><content>&lt;p>After writing my Go Dash blog, I got an idea of whether I could push the same blog to Medium. I started looking for ways to automate this thing. I checked on the GitHub Marketplace for actions that can push content to Medium directly. I found the GitHub action &lt;a href="https://github.com/pr4k/hugo-to-medium">hugo-to-medium&lt;/a> by &lt;a href="https://github.com/pr4k">Prakhar Kaushik&lt;/a>.&lt;/p>
&lt;p>This GitHub action was good, but there were some issues. In Hugo, I mostly use &lt;a href="https://gohugo.io/content-management/shortcodes/">shortcodes&lt;/a> to showcase the sample codes, figures, and images. Another one is that it doesn’t remove any shortcodes. There was no way for me to remove this from the publishing process. So this issue inspired me to create my own GitHub action, which allows to:&lt;/p>
&lt;ul>
&lt;li>Select and replace shortcodes using regex.&lt;/li>
&lt;li>Remove the frontmatter of YAML, TOML, or JSON formats from the post.&lt;/li>
&lt;li>Extract the title and tag from the frontmatter.&lt;/li>
&lt;li>Support both Markdown and Hugo Markdown formats.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>TL;DR&lt;/strong>: If you want to start creating a GitHub action without a backstory, head over to the &lt;a href="/posts/create-github-action/#creating-a-github-action">Creating a GitHub Action&lt;/a> section.&lt;/p>
&lt;hr>
&lt;p>While I was researching on how to create my own or custom GitHub actions, I started with the GitHub &lt;a href="https://docs.github.com/en/actions/creating-actions">documentation&lt;/a> - it was straight-forward; there were a few steps, but there are three ways to create GitHub Actions:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;em>Docker container action&lt;/em>&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>It packages the entire environment needed for GitHub Actions.&lt;/li>
&lt;li>They bundle not only your code but also the specific OS, dependencies, tools, and runtime environment.&lt;/li>
&lt;li>This packaging approach ensures consistency and reliability because the consumers of your action don&amp;rsquo;t need to worry about installing the necessary tools or dependencies themselves.&lt;/li>
&lt;li>It tends to be slower than JavaScript action due to the time it takes to build and retrieve the container.&lt;/li>
&lt;li>It can only execute on a Linux based operating system. If you&amp;rsquo;re using self-hosted runners&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, they must also be running a Linux based operating system and have Docker installed to execute Docker container actions.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;em>JavaScript action&lt;/em>&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>It runs directly on the runner&lt;sup id="fnref1:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> machine.&lt;/li>
&lt;li>These actions separate your action&amp;rsquo;s code from the environment used to run that code.&lt;/li>
&lt;li>It ensure compatibility with all GitHub-hosted runners&lt;sup id="fnref2:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> (including Ubuntu, Windows, and macOS).&lt;/li>
&lt;li>It uses pure JavaScript and existing runner binaries.&lt;/li>
&lt;li>GitHub Actions Toolkit offers Node.js packages for faster development.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;em>Composite action&lt;/em>&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Composite actions combine multiple workflow steps into one action.&lt;/li>
&lt;li>Say you have several run commands that you frequently use together in your workflows. With composite actions, you can bundle these commands into a single, well-defined action.&lt;/li>
&lt;li>It simplifies workflows by creating reusable actions.&lt;/li>
&lt;li>Using this composite action in your workflow makes your workflow configuration cleaner and more maintainable.&lt;/li>
&lt;li>It is great for organizing complex workflows efficiently.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Before we start, let&amp;rsquo;s check what mistakes I have made so you can avoid these mistakes.&lt;/p>
&lt;h2 id="mistakes-were-made">Mistakes were made&lt;/h2>
&lt;img src="https://media.tenor.com/uWx_Y53J7gEAAAAC/arrested-development-huge-mistake.gif" alt="mistake" class="center" style="border-radius: 8px; width: 420px; height: 230px;" />
&lt;p>Be clear about what you want to achieve. When I read the documentation, I was not clear about which action type I should use. I thought &lt;code>composite action&lt;/code> would be the perfect option for me. Let me explain why.&lt;/p>
&lt;p>I am thinking it will be straight forward that:&lt;/p>
&lt;ul>
&lt;li>I will write code or logic in &lt;a href="https://go.dev">Go&lt;/a>&lt;/li>
&lt;li>Build the program binary with the Linux AMD64 option.&lt;/li>
&lt;li>At the time of release, add it to the Assets of GitHub Releases.&lt;/li>
&lt;li>When action runs, it will fetch a binary from assets.&lt;/li>
&lt;li>Using that binary, I will pass the required arguments.&lt;/li>
&lt;li>The program will handle everything and post content to Medium.&lt;/li>
&lt;/ul>
&lt;p>But when I have written everything for actions, The program is working as expected and passing unit test cases. I thought now I had to create &lt;code>action.yml&lt;/code> with &lt;code>composite action&lt;/code> and take all inputs and pass them to the binary. I am happy and excited to test it 😁.&lt;/p>
&lt;p>As expected, it is not going to run on the first try. I got some errors; actions were not able to fetch the binary (I wrote a script for that). To solve this issue, I removed the script and placed the &lt;code>Go action&lt;/code> step, which will directly install &lt;code>Go&lt;/code> in the system. Then I can build a binary and execute it. It sounds simple, so the actions are as follows:&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="963745182" type="checkbox" />
&lt;label for="963745182">
&lt;span class="collapsable-code__language">yaml&lt;/span>
&lt;span class="collapsable-code__title">action.yml&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-yaml" >&lt;code>
name: &amp;#34;Markdown Or Hugo To Medium&amp;#34;
description: &amp;#34;Push hugo markdown post to medium&amp;#34;
# declaring input variables for workflow
inputs:
markdownOrHugo:
description: &amp;#34;Specify is it Markdown or Hugo Markdown&amp;#34;
required: true
default: markdown
shortcodes:
description: &amp;#34;Shortcodes JSON config file location&amp;#34;
required: false
replaceHyperlinkToLink:
description: &amp;#34;Replace hyperlink to link for medium cards&amp;#34;
required: false
default: false
frontmatterFormat:
description: &amp;#34;Select frontmatter format [yaml, toml]&amp;#34;
required: false
default: &amp;#34;yaml&amp;#34;
draft:
description: &amp;#34;Publish as a draft on Medium&amp;#34;
required: false
default: false
# running steps
runs:
using: &amp;#34;composite&amp;#34;
steps:
- name: Install jq
run: sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -y jq
shell: bash
- name: Check out the repository to the runner
uses: actions/checkout@v4
- name: Setup Go 1.21.x
uses: actions/setup-go@v4
with:
go-version: &amp;#39;1.21.x&amp;#39;
- name: Install dependencies and Build
run: |
cd ${{ github.action_path }} &amp;amp;&amp;amp; \
go get . &amp;amp;&amp;amp; \
go build -o HugoToMedium main.go &amp;amp;&amp;amp; \
./HugoToMedium \
-markdown-or-hugo=${{ inputs.markdownOrHugo }} \
-shortcodes-config-file=${{ inputs.shortcodes }} \
-replace-hyperlink-to-link=${{ inputs.replaceHyperlinkToLink }} \
-frontmatter=${{ inputs.frontmatterFormat }} \
-draft=${{ inputs.draft }}
shell: bash
# it will be used in GitHub Marketplace next to action name
branding:
icon: &amp;#34;book-open&amp;#34;
color: &amp;#34;blue&amp;#34;
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>This time, I thought everything looked good. But I was getting this error: &lt;code>FATA[2023-09-29T11:17:24Z] repository does not exist&lt;/code> - it was generated from binary; it was not able to find the &lt;code>.git&lt;/code> directory. I was using it to take the latest commit message.&lt;/p>
&lt;p>The conclusion for me was that I was not going to use the &lt;code>composite actions&lt;/code>. Now I have two options:&lt;/p>
&lt;ol>
&lt;li>&lt;code>JavaScript actions&lt;/code>&lt;/li>
&lt;li>&lt;code>Docker actions&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>If I use &lt;code>JavaScript actions&lt;/code>, I will have to write my logic again in JavaScript, which I have written in &lt;code>Go&lt;/code>. So I decided to use &lt;code>Docker Action&lt;/code>, which was easy to implement.&lt;/p>
&lt;p>Just need to write &lt;code>Dockerfile&lt;/code> and update &lt;code>action.yml&lt;/code>.&lt;/p>
&lt;p>What I learn from this mistake is that I will have to do proper planning next time 🤞.&lt;/p>
&lt;hr>
&lt;p>Let&amp;rsquo;s check out how to create custom GitHub actions. In this, I am going to create &lt;code>Docker actions&lt;/code>, but action.yml will have an almost similar syntax.&lt;/p>
&lt;h2 id="creating-a-github-action">Creating a GitHub Action&lt;/h2>
&lt;p>As we are creating &lt;code>Docker actions&lt;/code>, we need to write a &lt;code>Dockerfile&lt;/code>. In your project root directory, create a new &lt;code>Dockerfile&lt;/code> file. Make sure that your filename is capitalized correctly. &lt;code>D&lt;/code> should be capitalized, as shown above. We will be writing it for my &lt;a href="https://github.com/imrushi/markdown-or-hugo-to-medium">markdown-or-hugo-to-medium&lt;/a>.&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="382465197" type="checkbox" />
&lt;label for="382465197">
&lt;span class="collapsable-code__language">docker&lt;/span>
&lt;span class="collapsable-code__title">Dockerfile&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-docker" >&lt;code>
FROM golang:1.21.1-alpine3.18
RUN apk add git
COPY . /home/src
WORKDIR /home/src
RUN GOOS=linux GOARCH=amd64 go build -o HugoToMedium main.go
RUN chmod &amp;#43;x HugoToMedium
ENTRYPOINT [ &amp;#34;/home/src/HugoToMedium&amp;#34; ]
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>What is going on in the above Dockerfile:&lt;/p>
&lt;ul>
&lt;li>We are pulling golang:1.21.1 alpine image&lt;/li>
&lt;li>Installing git because if a program is required&lt;/li>
&lt;li>Copying all the required local files into the /home/src folder of the container&lt;/li>
&lt;li>Changing Working Directory&lt;/li>
&lt;li>In this golang:1.21.1 alpine image, golang is already installed. We will use that to build out a binary for the Linux OS with the AMD64 architecture.&lt;/li>
&lt;li>Update the file permissions to execute.&lt;/li>
&lt;li>After building the image, when it runs, it should directly run the binary, so we have added the ENTRYPOINT for that.&lt;/li>
&lt;/ul>
&lt;p>If you want to know more about the Dockerfile instructions for GitHub Action, check out this &lt;a href="https://docs.github.com/en/actions/creating-actions/dockerfile-support-for-github-actions#about-dockerfile-instructions">Document&lt;/a>.&lt;/p>
&lt;h2 id="creating-action-file">Creating Action File&lt;/h2>
&lt;p>Create a new &lt;code>action.yml&lt;/code> file in the root directory of your project. This action file will contain what inputs we should get, what the output should be, and what it should run&lt;/p>
&lt;p>There are 7 basic parameters:&lt;/p>
&lt;ul>
&lt;li>&lt;code>name&lt;/code>* : It will be used to display the name in the Actions tab.&lt;/li>
&lt;li>&lt;code>author&lt;/code>: Name of the action&amp;rsquo;s author.&lt;/li>
&lt;li>&lt;code>description&lt;/code>* : A short description of the action.&lt;/li>
&lt;li>&lt;code>input&lt;/code>: It allows you to specify the data that the action expects to use during runtime.
&lt;ul>
&lt;li>&lt;code>input.&amp;lt;input_id&amp;gt;&lt;/code>* : A string identifier to associate with the input. It should be a unique identifier.&lt;/li>
&lt;li>&lt;code>description&lt;/code>* : A string description of the input parameter.&lt;/li>
&lt;li>&lt;code>required&lt;/code>: A boolean to indicate whether the action requires the input parameter.&lt;/li>
&lt;li>&lt;code>default&lt;/code>: A string representing the default value.&lt;/li>
&lt;li>&lt;code>deprecationMessage&lt;/code>: If the input parameter is used, this string is logged as a warning message. You can use this warning to notify users that the input is deprecated and mention any alternatives.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>output&lt;/code>: It allows you to declare data that an action sets. Actions that run later in a workflow can use the output data set of previously run actions.&lt;/li>
&lt;li>&lt;code>runs&lt;/code>*: It specifies whether this is a JavaScript action, a composite action, or a Docker container action and how the action is executed.&lt;/li>
&lt;/ul>
&lt;p>This is just an overview of the parameters; what are they? For more information, you can check out these parameters in detail on &lt;a href="https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#about-yaml-syntax-for-github-actions">GitHub Docs&lt;/a>.&lt;/p>
&lt;p>Below is a sample &lt;code>action.yml&lt;/code> for &lt;code>Docker actions&lt;/code>:&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="976152834" type="checkbox" />
&lt;label for="976152834">
&lt;span class="collapsable-code__language">yaml&lt;/span>
&lt;span class="collapsable-code__title">action.yml&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-yaml" >&lt;code>
name: &amp;#34;Markdown Or Hugo To Medium&amp;#34;
description: &amp;#34;Push hugo markdown post to medium&amp;#34;
# input variables for data that the action expects at runtime
inputs:
markdownOrHugo:
description: &amp;#34;Specify is it Markdown or Hugo Markdown&amp;#34;
required: true
default: markdown
shortcodes:
description: &amp;#34;Shortcodes JSON config file location&amp;#34;
required: false
replaceHyperlinkToLink:
description: &amp;#34;Replace hyperlink to link for medium cards&amp;#34;
required: false
default: false
frontmatterFormat:
description: &amp;#34;Select frontmatter format [yaml, toml]&amp;#34;
required: false
default: &amp;#34;yaml&amp;#34;
draft:
description: &amp;#34;Publish as a draft on Medium&amp;#34;
required: false
default: false
# configuration to run action
runs:
using: &amp;#34;docker&amp;#34;
image: &amp;#34;Dockerfile&amp;#34;
# passing above inputs as argument to program
args:
- -markdown-or-hugo=${{ inputs.markdownOrHugo }}
- -shortcodes-config-file=${{ inputs.shortcodes }}
- -replace-hyperlink-to-link=${{ inputs.replaceHyperlinkToLink }}
- -frontmatter=${{ inputs.frontmatterFormat }}
- -draft=${{ inputs.draft }}
branding:
icon: &amp;#34;book-open&amp;#34;
color: &amp;#34;blue&amp;#34;
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>In the above &lt;code>action.yml&lt;/code> file, I have specified &lt;code>name&lt;/code> which will be used to show in the Actions tab. On the next line, &lt;code>description&lt;/code> what it does. I am taking five inputs, each of which starts with a variable name where the input will be stored. For instance, &lt;code>markdown-or-hugo&lt;/code> has its own description of what the variable is or, along with whether this variable should be &lt;code>required&lt;/code> or optional, and also sets the &lt;code>default&lt;/code> value to it. The same is done for the other four inputs.&lt;/p>
&lt;p>In the &lt;code>runs&lt;/code> section with &lt;code>using&lt;/code> parameter, we specify which type of actions we are using &lt;code>docker&lt;/code>, and we also have to configure which &lt;code>image&lt;/code> to use. If you specify &lt;code>Dockerfile&lt;/code> as a value, it will build a docker image and then use it. You can also directly use public Docker registry containers by specifying &lt;code>docker://image-name:tag&lt;/code>. If your program takes arguments, you can pass them with the &lt;code>args&lt;/code> parameter, and if you want to pass the above-taken input you can use &lt;code>${{ inputs.input_variable_name }}&lt;/code>.&lt;/p>
&lt;p>I don&amp;rsquo;t want to store anything for the output variable. So, I haven&amp;rsquo;t used the output parameter, but if you want to show something you can do like this:&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="591648732" type="checkbox" />
&lt;label for="591648732">
&lt;span class="collapsable-code__language">yaml&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-yaml" >&lt;code>
outputs:
output_parameter:
description: &amp;#39;This will show the output which will be set from container&amp;#39;
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Note that if we want to use this approach, we need to update the Dockerfile, and Entrypoint will be a shell script. From that shell script, we can set the output variable.&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="549812367" type="checkbox" />
&lt;label for="549812367">
&lt;span class="collapsable-code__language">bash&lt;/span>
&lt;span class="collapsable-code__title">entrypoint.sh&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-bash" >&lt;code>
#!/bin/sh
# Run your Go program and set GITHUB_OUTPUT
program_input=$(your_go_program)
# Set the output variable
echo &amp;#34;output_parameter=$program_input&amp;#34; &amp;gt;&amp;gt; $GITHUB_OUTPUT
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>You can check out more about the output &lt;a href="https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs">here&lt;/a>.&lt;/p>
&lt;p>&lt;code>branding&lt;/code> uses icons and colors to create a badge to personalize and distinguish your action. Badges are shown next to your action name in the GitHub Marketplace. You can find the icon &lt;a href="https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#omitted-icons">here&lt;/a>.&lt;/p>
&lt;p>Here you have written your first custom github action.&lt;/p>
&lt;h2 id="testing-the-github-action">Testing the GitHub Action&lt;/h2>
&lt;p>Before we publish our GitHub Action, we need to test it. It is strange that there is no way to test this GitHub action locally. I think GitHub should have provided something from which we can easily test this.&lt;/p>
&lt;p>At the time of testing, I faced some problems and wasn&amp;rsquo;t able to understand the &lt;a href="https://docs.github.com/en/actions/creating-actions/creating-a-docker-container-action#testing-out-your-action-in-a-workflow">testing document&lt;/a> properly. So I took the wrong way, published the action, and then tested it. Please avoid these mistakes.&lt;/p>
&lt;p>There are two ways to test it:&lt;/p>
&lt;ul>
&lt;li>If your repository is public, you can test it by assigning &lt;code>uses&lt;/code> with &lt;code>&amp;lt;username&amp;gt;/&amp;lt;repo-name&amp;gt;@&amp;lt;branch-name&amp;gt;&lt;/code> in &lt;code>steps&lt;/code>. With this method, you can test actions in other repositories as well. This workflow YAML should be located at &lt;code>.github/workflows/filename.yml&lt;/code>.&lt;/li>
&lt;/ul>
&lt;div class="collapsable-code">
&lt;input id="132647589" type="checkbox" />
&lt;label for="132647589">
&lt;span class="collapsable-code__language">yaml&lt;/span>
&lt;span class="collapsable-code__title">.github/workflows/publish-medium.yml&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-yaml" >&lt;code>
on: [push]
jobs:
hello_world_job:
runs-on: ubuntu-latest
name: A job to say hello
steps:
- name: test action step
# uses an action from given repo
uses: imrushi/markdown-or-hugo-to-medium@main
with:
markdown-or-hugo: &amp;#39;hugo&amp;#39;
shortcodes: &amp;#34;./shortcodes.json&amp;#34;
replaceHyperlinkToLink: false
frontmatterFormat: &amp;#34;yaml&amp;#34;
draft: true
&lt;/code>&lt;/pre>
&lt;/div>
&lt;ul>
&lt;li>Second way is to test it in the current repository, you can use &lt;code>./&lt;/code> in &lt;code>uses&lt;/code>. &lt;code>./&lt;/code> syntax to use an action available in the same repository. This option will work on both public and private repositories.&lt;/li>
&lt;/ul>
&lt;div class="collapsable-code">
&lt;input id="981476532" type="checkbox" />
&lt;label for="981476532">
&lt;span class="collapsable-code__language">yaml&lt;/span>
&lt;span class="collapsable-code__title">.github/workflows/publish-medium.yml&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-yaml" >&lt;code>
on: [push]
jobs:
hello_world_job:
runs-on: ubuntu-latest
name: A job to say hello
steps:
- name: test action step
# Uses an action in the root directory
uses: ./
with:
markdown-or-hugo: &amp;#39;hugo&amp;#39;
shortcodes: &amp;#34;./shortcodes.json&amp;#34;
replaceHyperlinkToLink: false
frontmatterFormat: &amp;#34;yaml&amp;#34;
draft: true
&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="publishing-the-github-action">Publishing the GitHub Action&lt;/h2>
&lt;p>As soon as our action has been tested, it&amp;rsquo;s time to publish it. Let&amp;rsquo;s see how we can do that.&lt;/p>
&lt;p>To publish GitHub Action to the GitHub Marketplace, your action repository should be public. Follow the below steps to make it public:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>First, create a &lt;a href="https://git-scm.com/docs/git-tag">git tag&lt;/a> with the version as per &lt;a href="https://semver.org/">semver&lt;/a>. &lt;code>git tag -a v1.0.0 -m &amp;quot;release message&amp;quot;&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Push the tag to the GitHub repo. &lt;code>git push origin v1.0.0&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>On the GitHub repository, go to Releases -&amp;gt; Create/Draft a new release.&lt;/p>
&lt;ul>
&lt;li>Mark with ✔️ Publish this Action to the GitHub Marketplace.&lt;/li>
&lt;li>It also shows if the required things are done or not.&lt;/li>
&lt;li>Select the primary category and another category.&lt;/li>
&lt;li>Choose a tag -&amp;gt; select v1.0.0&lt;/li>
&lt;li>Give Release title -&amp;gt; v1.0.0&lt;/li>
&lt;li>Provide Release Notes.&lt;/li>
&lt;li>If you want to provide any assets, drag and drop in the box.&lt;/li>
&lt;li>If your action is not production-ready, mark ✔️ Set as a pre-release.&lt;/li>
&lt;li>✔️ Set as the latest release&lt;/li>
&lt;li>If everything looks good, Hit the &lt;strong>Publish release&lt;/strong> button.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Congratulations! 🎉 Your action is now available on the GitHub Marketplace!&lt;/p>
&lt;h2 id="how-to-use-the-github-action">How to Use the GitHub Action&lt;/h2>
&lt;ul>
&lt;li>Start by creating a workflow in the .github/workflows directory of your repository (or create the directory if it doesn&amp;rsquo;t exist).&lt;/li>
&lt;li>Create a YAML file (e.g., main.yml) to define your workflow. Here&amp;rsquo;s an example of a workflow that uses the &amp;ldquo;Markdown Or Hugo To Medium&amp;rdquo; action&lt;/li>
&lt;/ul>
&lt;div class="collapsable-code">
&lt;input id="296578413" type="checkbox" />
&lt;label for="296578413">
&lt;span class="collapsable-code__language">yaml&lt;/span>
&lt;span class="collapsable-code__title">main.yml&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-yaml" >&lt;code>
on:
push:
branches:
- main
jobs:
publish-to-medium:
runs-on: ubuntu-latest
env:
POST_DIR: &amp;#34;content/posts&amp;#34;
ACCESS_TOKEN: ${{ secrets.MEDIUM_ACCESS_TOKEN }}
steps:
- name: Checkout Code
uses: actions/checkout@v2
# using published GitHub Actions
- name: Markdown Or Hugo To Medium
uses: imrushi/markdown-or-hugo-to-medium@v1.0.0
# providing inputs to the actions
with:
markdownOrHugo: &amp;#34;hugo&amp;#34;
shortcodes: &amp;#34;./shortcodes.json&amp;#34;
replaceHyperlinkToLink: false
frontmatterFormat: &amp;#34;yaml&amp;#34;
draft: true
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>This workflow is configured to run when changes are pushed to the main branch. It checks out your code, and then it uses the &amp;ldquo;Markdown Or Hugo To Medium&amp;rdquo; action, passing the necessary inputs as specified in the with section.&lt;/p>
&lt;ul>
&lt;li>Commit this workflow YAML file to your repository.&lt;/li>
&lt;li>Your workflow will now be automatically triggered when you push changes to the main branch.&lt;/li>
&lt;/ul>
&lt;p>That&amp;rsquo;s it! You&amp;rsquo;ve successfully created, published, and used your custom GitHub Action.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>In this blog post, we saw how to create a GitHub action using Docker containers. It covers how to prepare and use a Dockerfile and action.yml for GitHub actions.&lt;/p>
&lt;p>This blog is about my experience, the mistakes I have made while creating my first GitHub action. I will be creating more GitHub actions for my use cases. You can check them out on my GitHub profile here.&lt;/p>
&lt;p>I hope this blog will help you in making your first GitHub action. If you have any questions, please let me know in the comment section. If you find anything new in this blog, share it with others, and if you find any mistakes in it, please let me know and help me make it better. I will definitely fix it.&lt;/p>
&lt;p>Thanks for reading! 😊&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&amp;ldquo;Runner&amp;rdquo; refers to a virtual machine or container environment where your GitHub Action workflows are executed.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref1:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref2:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></content></item><item><title>Go: Basics and a Dash of Clean Code</title><link>/posts/go-basics-and-a-dash-of-clean-code/</link><pubDate>Sun, 03 Sep 2023 19:31:57 +0530</pubDate><guid>/posts/go-basics-and-a-dash-of-clean-code/</guid><description>&lt;hr>
&lt;p>If you have read my first blog &lt;a href="/posts/lets-go/">Let&amp;rsquo;s Go&lt;/a>, which is not about the Go programming language, go check it out 😅. You can easily tell how much I am obsessed with the Go programming language. After writing my first blog, I have done some thinking, like where to start my Go programming series blog. I have done some research and collected some &lt;a href="/notes/go/">notes&lt;/a>.&lt;/p>
&lt;p>As you read the heading of the blog, I will cover some of the basics that I think are important for anyone starting a programming language that also follows some of the principles of clean code. The topics that I have covered in this blog are the effective way you write your Go code and questions that arise in my mind when I have studied Golang, like why there are different types of variable declarations. Why have they created the Go programming language?&lt;/p></description><content>&lt;hr>
&lt;p>If you have read my first blog &lt;a href="/posts/lets-go/">Let&amp;rsquo;s Go&lt;/a>, which is not about the Go programming language, go check it out 😅. You can easily tell how much I am obsessed with the Go programming language. After writing my first blog, I have done some thinking, like where to start my Go programming series blog. I have done some research and collected some &lt;a href="/notes/go/">notes&lt;/a>.&lt;/p>
&lt;p>As you read the heading of the blog, I will cover some of the basics that I think are important for anyone starting a programming language that also follows some of the principles of clean code. The topics that I have covered in this blog are the effective way you write your Go code and questions that arise in my mind when I have studied Golang, like why there are different types of variable declarations. Why have they created the Go programming language?&lt;/p>
&lt;p>Let&amp;rsquo;s find the answer&amp;rsquo;s:&lt;/p>
&lt;h2 id="history-of-go">History of Go&lt;/h2>
&lt;p>The Google search engine experienced an issue back in 2007.&lt;/p>
&lt;ul>
&lt;li>Programs containing millions of lines of code needed to be maintained.&lt;/li>
&lt;li>Before they could experiment with any new code changes, they had to compile the program, which took them about an hour at that time.&lt;/li>
&lt;li>String processing is Google&amp;rsquo;s additional issue.&lt;/li>
&lt;li>Numerous text files, or web pages, are read and analyzed by Google.&lt;/li>
&lt;/ul>
&lt;p>This was obviously not good for the developers because it made them less productive.&lt;/p>
&lt;p>So Google engineers &lt;a href="https://en.wikipedia.org/wiki/Robert_Griesemer">Robert Griesemer&lt;/a>, &lt;a href="https://en.wikipedia.org/wiki/Rob_Pike">Rob Pike&lt;/a>, and &lt;a href="https://en.wikipedia.org/wiki/Ken_Thompson">Ken Thompson&lt;/a> sketched out some goals for a new language:&lt;/p>
&lt;ul>
&lt;li>Fast Compilation (Efficiency)&lt;/li>
&lt;li>Less cumbersome code (Simplicity)&lt;/li>
&lt;li>Unused memory freed automatically (Garbage Collection)&lt;/li>
&lt;li>Easy-to-write software that does several operations simultaneously (Concurrency)&lt;/li>
&lt;li>Good support for processor with multiple cores&lt;/li>
&lt;/ul>
&lt;p>After a couple years of work, Google had created Go: a language that was fast to write code and produced programs that were fast to compile and run. Google built a rich library of string functions into Go, Garbage Collecting makes strings in Go simple to think about, and efficient in ways some other string libraries are not. The project switched to an open source license in 2009. It’s now free for anyone to use.&lt;/p>
&lt;p>If you&amp;rsquo;re developing a command-line tool in Go, you can generate executable files for Windows, MacOS, and Linux using the same source code. If you&amp;rsquo;re building a web server, Go can assist you in efficiently managing multiple simultaneous user connections. Regardless of your project&amp;rsquo;s nature, Go will aid you in making your code easier to maintain.&lt;/p>
&lt;hr>
&lt;p>Let&amp;rsquo;s start with syntax and clean code principles :&lt;/p>
&lt;h2 id="go-file-layout">Go file layout&lt;/h2>
&lt;p>Now let’s look at the code and figure out what it actually means…&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="678425391" type="checkbox" />
&lt;label for="678425391">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">Hello World&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
package main
import &amp;#34;fmt&amp;#34;
func main() {
fmt.Println(&amp;#34;Hello, World&amp;#34;)
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Every Go file has three sections:&lt;/p>
&lt;ol>
&lt;li>The &lt;code>package&lt;/code> clause&lt;/li>
&lt;li>Any &lt;code>import&lt;/code> statements&lt;/li>
&lt;li>The actual &lt;code>code&lt;/code>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Package&lt;/code> : A package in Go is a way to organize and structure code into meaningful units, helping with code organization and reusability. It allows control over visibility, promoting encapsulation and dependency management. The &lt;code>main&lt;/code> package serves as the entry point for Go programs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>import&lt;/code> : Go files almost always have one or more &lt;code>import&lt;/code> statements. The &lt;code>import&lt;/code> statement is used to bring in external packages that your code relies on. It ensures that your program loads only the necessary packages, making it faster and more efficient than loading everything at once.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>actual code&lt;/code> : The last part of every Go file is the actual code, which is often split up into one or more functions. A &lt;code>function&lt;/code> is a group of code that you &lt;code>call (run)&lt;/code> from other places in your program. When a Go program is run, it looks for a function named &lt;code>main&lt;/code> and runs that first, which is why we need this function &lt;code>main&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Function&lt;/code> : A function is a group of one or more lines of code that you can call (run) from other places in your program.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Below is the code with what it does in comments:&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="521846793" type="checkbox" />
&lt;label for="521846793">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">Hello World&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
// This line says the rest of the code in
// this file belongs to the &amp;#34;main&amp;#34; package
package main
// This says we will be using text-formatting
// code from the &amp;#34;fmt&amp;#34; package
import &amp;#34;fmt&amp;#34;
// The &amp;#34;main&amp;#34; function is special; it gets run
// first when your program runs.
func main() {
// This line displays (&amp;#34;print&amp;#34;) &amp;#34;Hello, World&amp;#34; in
// your terminal (or web browser, if you&amp;#39;re using the Go Playground)
//
// It does this by calling the &amp;#34;Println&amp;#34; function
// from the &amp;#34;fmt&amp;#34; package
fmt.Println(&amp;#34;Hello, World&amp;#34;)
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;blockquote>
&lt;p>Note: When a Go program is run, it looks for a function named &lt;code>main&lt;/code> and runs that first.&lt;/p>
&lt;/blockquote>
&lt;h2 id="no-semicolons">No Semicolons&lt;/h2>
&lt;p>As you can see in our previous program, there are no semicolons to separate statements in Go; we can use semicolons, but it’s not required (in fact, it’s generally frowned upon). This design choice was made to enhance code readability and reduce the potential for common programming errors.&lt;/p>
&lt;p>Like &lt;a href="https://en.wikipedia.org/wiki/C_%28programming_language%29">C&lt;/a>, Go&amp;rsquo;s formal grammar uses semicolons to terminate statements, but unlike &lt;a href="https://en.wikipedia.org/wiki/C_%28programming_language%29">C&lt;/a>, those semicolons do not appear in the source. Instead, the &lt;a href="https://en.wikipedia.org/wiki/Lexical_analysis">lexer&lt;/a> uses a simple rule to insert semicolons automatically as it scans, so the input text is mostly free of them.&lt;/p>
&lt;h3 id="how-does-it-know-when-to-add-semicolons">How does it know when to add semicolons?&lt;/h3>
&lt;p>The rule is: If a line ends with an identifier (for example: words such as &lt;code>int&lt;/code> or &lt;code>float64&lt;/code>), a basic value such as a number or a string, or certain specific tokens such as&lt;/p>
&lt;p>&lt;code>break continue fallthrough return ++ -- ) }&lt;/code>&lt;/p>
&lt;p>The Go lexer then adds a semicolon after that token when it encounters a newline, which is &lt;code>\n&lt;/code>.&lt;/p>
&lt;p>To put it simply, when there&amp;rsquo;s a chance that a newline could end a statement, Go automatically inserts a semicolon.&lt;/p>
&lt;p>One consequence of the semicolon insertion rules is that you cannot put the opening brace of a control structure like &lt;code>if&lt;/code>, &lt;code>for&lt;/code>, &lt;code>switch&lt;/code>, or &lt;code>select&lt;/code> on the new line. If you do, a semicolon will be inserted before the brace, which could cause unwanted effects. So write them similar to below:&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="283615794" type="checkbox" />
&lt;label for="283615794">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">if statement&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
if i &amp;lt; f() {
g()
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>not like this:&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="453126879" type="checkbox" />
&lt;label for="453126879">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">bad if statement&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
if i &amp;lt; f() // wrong!
{ // wrong!
g()
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="formatting">Formatting&lt;/h2>
&lt;p>Formatting issues are the most contentious but the least important. People may prefer different formatting styles, so when another developer or person reads the same code, it may take some time for them to grasp if they are not accustomed to the same formatting style. It will be easier if everyone formats their documents the same way.&lt;/p>
&lt;p>Go takes an unusual approach and lets the machine take care of most formatting issues. The Go compiler comes with a standard formatting tool called &lt;code>go fmt&lt;/code>. This tool reads a program and automatically formats it with consistent indentation, alignment, and comment retention or adjustment to match a standard style.&lt;/p>
&lt;p>Next time, whenever you share your code, other Go developers will expect it to be in the standard Go format. With &lt;strong>&lt;em>Go, all you have to do is run &lt;code>go fmt&lt;/code>&lt;/em>&lt;/strong>.&lt;/p>
&lt;p>If you want to try its simple version, head over to the &lt;a href="https://go.dev/play">Go playground&lt;/a>, write some unformatted code, and hit the &lt;code>format&lt;/code> button.&lt;/p>
&lt;h2 id="comments">Comments&lt;/h2>
&lt;p>In Go, developers write text annotations within the source code as comments. These annotations are not executed by the program but serve as notes, explanations, or documentation. Comments are essential for providing context, making code more understandable, and documenting code for future reference.&lt;/p>
&lt;p>Go provides C-style &lt;code>/* */&lt;/code> block comments and C++-style &lt;code>//&lt;/code> line comments.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Single-line comments&lt;/strong>: Single-line comments start with two slashes &lt;code>//&lt;/code> and continue until the end of the line. They are used for adding brief explanations or clarity to a specific line of code.&lt;/li>
&lt;/ol>
&lt;div class="collapsable-code">
&lt;input id="713492568" type="checkbox" />
&lt;label for="713492568">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">Single-line comment&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
// This is a single-line comment in Go.
var x int // This comment explains the purpose of the variable.
&lt;/code>&lt;/pre>
&lt;/div>
&lt;ol start="2">
&lt;li>&lt;strong>Multi-line comments&lt;/strong>: Multi-line comments are enclosed within &lt;code>/*&lt;/code> and &lt;code>*/&lt;/code> and can span multiple lines. They are commonly used for documenting larger sections of code, writing package-level documentation, or providing more detailed explanations.&lt;/li>
&lt;/ol>
&lt;div class="collapsable-code">
&lt;input id="543961287" type="checkbox" />
&lt;label for="543961287">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">Multi-line comment&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
/*
This is a multi-line comment in Go.
It can span multiple lines and is useful for providing
detailed explanations or comments for larger code blocks.
*/
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>Go also has a convention for documenting exported (public) identifiers and packages using special comments, often referred to as &amp;ldquo;comment annotations&amp;rdquo; or &amp;ldquo;comments for the &lt;code>godoc&lt;/code> tool&amp;rdquo;. These comments are structured in a way that allows the godoc tool to automatically generate documentation based on them.&lt;/p>
&lt;p>For documenting exported identifiers, you can use a comment placed directly before the identifier, starting with the identifier name and a brief description:&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="529814637" type="checkbox" />
&lt;label for="529814637">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">Sample Go Doc Comment&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
// MyFunction is a public function that performs a specific task.
func MyFunction() {
// Function implementation...
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>For package-level documentation, you can include a comment at the top of the file:&lt;/p>
&lt;div class="collapsable-code">
&lt;input id="368497251" type="checkbox" />
&lt;label for="368497251">
&lt;span class="collapsable-code__language">go&lt;/span>
&lt;span class="collapsable-code__title">Package level doc comment&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="Show" data-label-collapse="Hide">&lt;/span>
&lt;/label>
&lt;pre class="language-go" >&lt;code>
// Package mypackage provides functionality for...
package mypackage
import &amp;#34;fmt&amp;#34;
// ExportedFunction is a function that...
func ExportedFunction() {
// Function implementation...
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>To generate documentation from these comments, you can use the godoc command-line tool. Running godoc on your Go code will produce documentation that includes your comments, making it easier for others to understand and use your code. Properly documented code is not only more understandable but also encourages collaboration and code maintenance.&lt;/p>
&lt;h2 id="names">Names&lt;/h2>
&lt;img src="https://media0.giphy.com/media/3orieQcuSiWouzdHq0/giphy.webp" alt="names" class="center" style="border-radius: 8px; width: 320px; height: 230px;" />
&lt;p>Names are as important in Go as in any other language. When coding, we should consider naming variables, functions, arguments, classes, packages, source files, and directories that contain those source files.&lt;/p>
&lt;blockquote>
&lt;p>According to the book &lt;code>Clean Code&lt;/code> by &lt;code>Robert C. Martin&lt;/code>, there are some standards for naming:&lt;/p>
&lt;ol>
&lt;li>Choose descriptive and unambiguous names.&lt;/li>
&lt;li>Make a meaningful distinction.&lt;/li>
&lt;li>Use pronounceable names.&lt;/li>
&lt;li>Use searchable names.&lt;/li>
&lt;li>Replace magic numbers with named constants.&lt;/li>
&lt;li>Avoid encodings. Don&amp;rsquo;t append prefixes or type information.&lt;/li>
&lt;/ol>
&lt;p>You can check this points in detail in this &lt;a href="https://medium.com/@pabashani.herath/clean-code-naming-conventions-4cac223de3c6">blog&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Go has one simple set of rules that apply to the names of variables, functions, and types:&lt;/p>
&lt;ul>
&lt;li>A name must begin with a letter and can have any number of additional letters and numbers.&lt;/li>
&lt;li>The following points determine the visibility of a name (variable, function, and type names) outside a package:
&lt;ul>
&lt;li>If the name of a variable, function, or type begins with a &lt;strong>&lt;em>Capital letter&lt;/em>&lt;/strong>, it is considered as &lt;strong>&lt;em>Exported&lt;/em>&lt;/strong> and can be accessed from a package outside the current one.&lt;/li>
&lt;li>Example - As you have seen in the above &lt;a href="/posts/go-basics-and-a-dash-of-clean-code/#go-file-layout">hello world program&lt;/a>. The &lt;code>P&lt;/code> in &lt;code>fmt.Println&lt;/code> is capitalized: so it can be used from the main package or any other.&lt;/li>
&lt;li>If the name begins with a &lt;strong>&lt;em>Lowercase letter&lt;/em>&lt;/strong>, it is considered &lt;strong>&lt;em>Unexported&lt;/em>&lt;/strong> and can only be accessed within the current package.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Above are the only rules that are enforced in Go language. But &lt;code>Go Community&lt;/code> follows some additional conventions as well:&lt;/p>
&lt;ul>
&lt;li>When naming something in Go, for instance a variable or a function, use &lt;a href="https://en.wikipedia.org/wiki/Camel_case">CamelCase&lt;/a>. This means that if the name has more than one word, start with a lowercase letter for the first word and then capitalize the first letter of each following word without using spaces.&lt;/li>
&lt;li>For example, &lt;code>topRank&lt;/code> and &lt;code>RetryConnection&lt;/code> are in CamelCase, which looks like camel humps.&lt;/li>
&lt;li>If a name&amp;rsquo;s meaning is clear from the context, it&amp;rsquo;s common to use abbreviations such as &lt;code> i&lt;/code> for &lt;code>index&lt;/code> or &lt;code>max&lt;/code> for &lt;code>maximum&lt;/code> to keep the code concise and easy to read.&lt;/li>
&lt;/ul>
&lt;h3 id="mixedcaps">MixedCaps&lt;/h3>
&lt;p>The convention in Go is to use &lt;code>MixedCaps&lt;/code> or &lt;code>mixedCaps&lt;/code> rather than underscores to write multi-word names.&lt;/p>
&lt;h3 id="package-name">Package Name&lt;/h3>
&lt;p>Good package names make code better. A package’s name provides context for its contents, making it easier for the developer or user to understand what the package is for and how to use it. The name also helps package maintainers determine what does and does not belong in the package as it evolves. Well-named packages make it easier to find the code you need.&lt;/p>
&lt;h4 id="package-name-guideline">Package Name Guideline&lt;/h4>
&lt;p>To make a Go package easy to use, it&amp;rsquo;s best to give it a short, clear, and meaningful single-word name. Packages typically have lowercase names without &lt;code>under_scores&lt;/code> or &lt;code>mixed capital&lt;/code> letters. These names are often simple nouns, for example:&lt;/p>
&lt;ul>
&lt;li>time (provides functionality for measuring and displaying time)&lt;/li>
&lt;li>list (implements a doubly linked list)&lt;/li>
&lt;li>http (provides HTTP client and server implementations)&lt;/li>
&lt;/ul>
&lt;p>Below are examples of bad naming styles in Go:&lt;/p>
&lt;ul>
&lt;li>computeServiceClient&lt;/li>
&lt;li>priority_queue&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;em>Abbreviate judiciously&lt;/em>&lt;/strong>. Package names may be abbreviated when the abbreviation is familiar to the programmer. Widely used packages often have compressed names:&lt;/p>
&lt;ul>
&lt;li>strconv (string conversion)&lt;/li>
&lt;li>syscall (system call)&lt;/li>
&lt;li>fmt (formatted I/O)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Note:- If abbreviating a package name makes it ambiguous or unclear, don’t do it.&lt;/p>
&lt;/blockquote>
&lt;p>Another convention is that the package name is the base name of its source directory; the package in &lt;code>src/encoding/base64&lt;/code> is imported as &lt;code>&amp;quot;encoding/base64&amp;quot;&lt;/code> but has the name &lt;code>base64&lt;/code>, not &lt;code>encoding_base64&lt;/code> and not &lt;code>encodingBase64&lt;/code>.&lt;/p>
&lt;p>Another short example is &lt;code>once.Do&lt;/code>; &lt;code>once.Do(setup)&lt;/code> reads well and would not be improved by writing &lt;code>once.DoOrWaitUntilDone(setup)&lt;/code>. &lt;em>Long names don&amp;rsquo;t automatically make things more readable.&lt;/em> A helpful doc comment can often be more valuable than an extra-long name.&lt;/p>
&lt;h3 id="interface-names">Interface Names&lt;/h3>
&lt;p>By convention, one-method interfaces are named by the &lt;code>method name&lt;/code> plus an &lt;code>-er&lt;/code> suffix or similar modification to construct an agent noun; Reader, Writer, Formatter, CloseNotifier etc.&lt;/p>
&lt;h2 id="variable-declaration">Variable Declaration&lt;/h2>
&lt;p>In Go, a &lt;code>variable&lt;/code> is a piece of storage containing a value. You can give a variable a name by using a &lt;code>variable declaration&lt;/code>. Just use the &lt;code>var&lt;/code> keyword, followed by the desired name and the type of values the variable will hold.&lt;/p>
&lt;p>Variable declaration syntax:&lt;/p>
&lt;p>&lt;code>var name string&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>var&lt;/code> :- A keyword.&lt;/li>
&lt;li>&lt;code>name&lt;/code> :- A variable name that you want to access in your program.&lt;/li>
&lt;li>&lt;code>string&lt;/code> :- Any datatype that the variable will hold data for. (Go-supported datatype)&lt;/li>
&lt;/ul>
&lt;p>Once you declare a variable, you can assign any value of that type to it with the &lt;code>=&lt;/code> sign.&lt;/p>
&lt;p>&lt;code>var name string = &amp;quot;Jerry&amp;quot;&lt;/code>&lt;/p>
&lt;p>You can assign values to multiple variables in the same statement. Just place multiple variable names on the left side of &lt;code>=&lt;/code>, and the same number of values on the right side, separated with commas (&lt;code>,&lt;/code>).&lt;/p>
&lt;p>Syntax for assigning multiple variables at once:&lt;/p>
&lt;p>&lt;code>var length, width float64 = 1.2, 2.4&lt;/code>&lt;/p>
&lt;p>You can assign new values to existing variables, but they need to be values of the same type, for example: when you assign an &lt;code>int&lt;/code> variable value to a &lt;code>string&lt;/code> type variable. Go’s static typing ensures you don’t accidentally assign the wrong kind of value to a variable.&lt;/p>
&lt;h2 id="short-variable-declaration">Short Variable Declaration&lt;/h2>
&lt;p>As we saw in the above section, we can declare variables and assign them values on the same line. But if you know what the initial value of a variable is going to be as soon as you declare it, it’s more typical to use a &lt;code>short variable declaration&lt;/code>. Instead of explicitly declaring the type of the variable and later assigning it with &lt;code>=&lt;/code>, you do both at once using &lt;code>:=&lt;/code>.&lt;/p>
&lt;p>Here are our previous examples with short variable declarations :&lt;/p>
&lt;ol>
&lt;li>&lt;code>name := jerry&lt;/code> instead of &lt;code>var name string = &amp;quot;Jerry&amp;quot;&lt;/code>&lt;/li>
&lt;li>&lt;code>length, width := 1.2, 2.4&lt;/code> instead of &lt;code>var length, width float64 = 1.2, 2.4&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>There’s no need to explicitly declare the variable’s type; the type of the value assigned to the variable becomes the type of that variable.&lt;/p>
&lt;p>Because short variable declarations are so convenient and concise, they’re used more often than regular declarations. You’ll still see both forms occasionally, though, so it’s important to be familiar with both.&lt;/p>
&lt;h2 id="thanks">Thanks!!!&lt;/h2>
&lt;p>In this blog, we&amp;rsquo;ve delved into Go&amp;rsquo;s intriguing history, exploring its origins and essential conventions such as formatting, comments with the godoc tool, and naming guidelines. We also demystified the absence of semicolons in Go and how they are automatically inserted.&lt;/p>
&lt;p>If you found this blog helpful or discovered something new, please consider sharing it with your connections who may benefit from a clearer understanding. If you&amp;rsquo;ve spotted any errors or have additional insights, please don&amp;rsquo;t hesitate to leave a comment below. Let&amp;rsquo;s engage in discussions and learn together.&lt;/p>
&lt;p>Once again, a big thank you for joining me on this journey. 🥳&lt;/p>
&lt;img src="https://media1.giphy.com/media/xuAq1gW0hwlREbbMU7/giphy.webp" alt="names" class="center" style="border-radius: 8px; width: 320px; height: 230px;" />
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.oreilly.com/library/view/head-first-go/9781491969540/">Head First GO&lt;/a> - Jay McGavren&lt;/li>
&lt;li>&lt;a href="https://go.dev/doc/effective_go">Effective Go&lt;/a> - Go Doc&lt;/li>
&lt;li>&lt;a href="https://www.oreilly.com/library/view/clean-code-a/9780136083238/">Clean Code&lt;/a> - Robert C. Martin&lt;/li>
&lt;/ul></content></item></channel></rss>